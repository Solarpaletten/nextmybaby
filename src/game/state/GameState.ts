// src/game/state/GameState.ts
import { BabyState } from '../entities/BabyState';

export interface RoomConfig {
  key: string;
  name: string;
  unlocked: boolean;
  unlockCondition?: {
    type: 'feeds' | 'plays' | 'sleeps';
    count: number;
  };
}

export interface Achievement {
  id: string;
  name: string;
  description: string;
  unlocked: boolean;
  icon: string;
}

export class GameState {
  private static instance: GameState;
  public currentScene?: Phaser.Scene; // –î–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç
  public currentRoom: string = 'BedroomScene';
  public rooms: Map<string, RoomConfig> = new Map([
    ['BedroomScene', { key: 'BedroomScene', name: 'üõèÔ∏è –°–ø–∞–ª—å–Ω—è', unlocked: true }],
    ['KitchenScene', { key: 'KitchenScene', name: 'üçΩÔ∏è –ö—É—Ö–Ω—è', unlocked: false, unlockCondition: { type: 'feeds', count: 3 } }],
    ['PlayroomScene', { key: 'PlayroomScene', name: 'üéÆ –ò–≥—Ä–æ–≤–∞—è', unlocked: false, unlockCondition: { type: 'plays', count: 5 } }],
    ['BathroomScene', { key: 'BathroomScene', name: 'üõÅ –í–∞–Ω–Ω–∞—è', unlocked: false, unlockCondition: { type: 'sleeps', count: 2 } }],
  ]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞–ª—ã—à–∞ (singleton)
  public babyState: BabyState;

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
  public stats = {
    totalFeeds: 0,
    totalPlays: 0,
    totalSleeps: 0,
  };

  // –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  public achievements: Map<string, Achievement> = new Map([
    ['firstFeed', {
      id: 'firstFeed',
      name: '–ü–µ—Ä–≤–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ',
      description: '–ü–æ–∫–æ—Ä–º–∏–ª –º–∞–ª—ã—à–∞ –ø–µ—Ä–≤—ã–π —Ä–∞–∑',
      unlocked: false,
      icon: 'üçº'
    }],
    ['threeFeeds', {
      id: 'threeFeeds',
      name: '–ó–∞–±–æ—Ç–ª–∏–≤—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å',
      description: '–ü–æ–∫–æ—Ä–º–∏–ª –º–∞–ª—ã—à–∞ 3 —Ä–∞–∑–∞',
      unlocked: false,
      icon: 'üçΩÔ∏è'
    }],
    ['firstSleep', {
      id: 'firstSleep',
      name: '–°–ª–∞–¥–∫–∏–π —Å–æ–Ω',
      description: '–£–ª–æ–∂–∏–ª –º–∞–ª—ã—à–∞ —Å–ø–∞—Ç—å',
      unlocked: false,
      icon: 'üò¥'
    }],
    ['firstPlay', {
      id: 'firstPlay',
      name: '–í–µ—Å—ë–ª–∞—è –∏–≥—Ä–∞',
      description: '–ü–æ–∏–≥—Ä–∞–ª —Å –º–∞–ª—ã—à–æ–º',
      unlocked: false,
      icon: 'üéÆ'
    }],
    ['unlockedKitchen', {
      id: 'unlockedKitchen',
      name: '–ö—É—Ö–Ω—è –æ—Ç–∫—Ä—ã—Ç–∞',
      description: '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∫—É—Ö–Ω—è',
      unlocked: false,
      icon: 'üçΩÔ∏è'
    }],
    ['unlockedPlayroom', {
      id: 'unlockedPlayroom',
      name: '–ò–≥—Ä–æ–≤–∞—è –æ—Ç–∫—Ä—ã—Ç–∞',
      description: '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞',
      unlocked: false,
      icon: 'üéÆ'
    }],
  ]);

  private constructor() {
    this.babyState = new BabyState();
    this.loadFromStorage();
  }

  // Singleton pattern
  public static getInstance(): GameState {
    if (!GameState.instance) {
      GameState.instance = new GameState();
    }
    return GameState.instance;
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
  private loadFromStorage(): void {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if (typeof window !== 'undefined' && window.localStorage) {
      const saved = localStorage.getItem('babyverse_state');
      if (saved) {
        console.log('üìÇ –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –∑–∞–≥—Ä—É–∑–∫–∞...');
      }
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
  public saveRoomState(roomKey: string): void {
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã: ${roomKey}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å localStorage
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
  public updateStats(action: 'feed' | 'play' | 'sleep'): void {
    switch (action) {
      case 'feed':
        this.stats.totalFeeds++;
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        if (this.stats.totalFeeds === 1) {
          this.unlockAchievement('firstFeed');
        }
        if (this.stats.totalFeeds === 3) {
          this.unlockAchievement('threeFeeds');
        }
        break;
      case 'play':
        this.stats.totalPlays++;
        if (this.stats.totalPlays === 1) {
          this.unlockAchievement('firstPlay');
        }
        break;
      case 'sleep':
        this.stats.totalSleeps++;
        if (this.stats.totalSleeps === 1) {
          this.unlockAchievement('firstSleep');
        }
        break;
    }

    this.checkUnlocks();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–æ–º–Ω–∞—Ç
  private checkUnlocks(): void {
    this.rooms.forEach((room, key) => {
      if (!room.unlocked && room.unlockCondition) {
        const { type, count } = room.unlockCondition;
        const currentCount = type === 'feeds' ? this.stats.totalFeeds :
                            type === 'plays' ? this.stats.totalPlays :
                            this.stats.totalSleeps;

        if (currentCount >= count) {
          room.unlocked = true;
          console.log(`üéâ –ö–æ–º–Ω–∞—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: ${room.name}`);
          
          // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
          if (key === 'KitchenScene') {
            this.unlockAchievement('unlockedKitchen');
          } else if (key === 'PlayroomScene') {
            this.unlockAchievement('unlockedPlayroom');
          }
        }
      }
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–Ω–∞—Ç—ã
  public isRoomUnlocked(roomKey: string): boolean {
    return this.rooms.get(roomKey)?.unlocked || false;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
  public getUnlockedRooms(): RoomConfig[] {
    return Array.from(this.rooms.values()).filter(room => room.unlocked);
  }

  // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  public unlockAchievement(achievementId: string): void {
    const achievement = this.achievements.get(achievementId);
    if (achievement && !achievement.unlocked) {
      achievement.unlocked = true;
      console.log(`üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievement.name}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ü–µ–Ω–∞
      if (this.currentScene) {
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        import('../ui/AchievementNotification').then(module => {
          new module.AchievementNotification(this.currentScene!, achievement);
        });
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  public getAchievements(): Achievement[] {
    return Array.from(this.achievements.values());
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  public getUnlockedAchievements(): Achievement[] {
    return Array.from(this.achievements.values()).filter(a => a.unlocked);
  }
}