// src/game/state/GameState.ts
import { BabyState } from '../entities/BabyState';

export interface RoomConfig {
  key: string;
  name: string;
  unlocked: boolean;
  unlockCondition?: {
    type: 'feeds' | 'plays' | 'sleeps';
    count: number;
  };
}

export class GameState {
  private static instance: GameState;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç
  public currentRoom: string = 'BedroomScene';
  public rooms: Map<string, RoomConfig> = new Map([
    ['BedroomScene', { key: 'BedroomScene', name: 'üõèÔ∏è –°–ø–∞–ª—å–Ω—è', unlocked: true }],
    ['KitchenScene', { key: 'KitchenScene', name: 'üçΩÔ∏è –ö—É—Ö–Ω—è', unlocked: false, unlockCondition: { type: 'feeds', count: 3 } }],
    ['PlayroomScene', { key: 'PlayroomScene', name: 'üéÆ –ò–≥—Ä–æ–≤–∞—è', unlocked: false, unlockCondition: { type: 'plays', count: 5 } }],
    ['BathroomScene', { key: 'BathroomScene', name: 'üõÅ –í–∞–Ω–Ω–∞—è', unlocked: false, unlockCondition: { type: 'sleeps', count: 2 } }],
  ]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞–ª—ã—à–∞ (singleton)
  public babyState: BabyState;

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
  public stats = {
    totalFeeds: 0,
    totalPlays: 0,
    totalSleeps: 0,
  };

  private constructor() {
    this.babyState = new BabyState();
  }

  // Singleton pattern
  public static getInstance(): GameState {
    if (!GameState.instance) {
      GameState.instance = new GameState();
    }
    return GameState.instance;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
  public saveRoomState(roomKey: string): void {
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã: ${roomKey}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å localStorage
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
  public updateStats(action: 'feed' | 'play' | 'sleep'): void {
    switch (action) {
      case 'feed':
        this.stats.totalFeeds++;
        break;
      case 'play':
        this.stats.totalPlays++;
        break;
      case 'sleep':
        this.stats.totalSleeps++;
        break;
    }

    this.checkUnlocks();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–æ–º–Ω–∞—Ç
  private checkUnlocks(): void {
    this.rooms.forEach((room, key) => {
      if (!room.unlocked && room.unlockCondition) {
        const { type, count } = room.unlockCondition;
        const currentCount = type === 'feeds' ? this.stats.totalFeeds :
                            type === 'plays' ? this.stats.totalPlays :
                            this.stats.totalSleeps;

        if (currentCount >= count) {
          room.unlocked = true;
          console.log(`üéâ –ö–æ–º–Ω–∞—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: ${room.name}`);
        }
      }
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–Ω–∞—Ç—ã
  public isRoomUnlocked(roomKey: string): boolean {
    return this.rooms.get(roomKey)?.unlocked || false;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
  public getUnlockedRooms(): RoomConfig[] {
    return Array.from(this.rooms.values()).filter(room => room.unlocked);
  }
}