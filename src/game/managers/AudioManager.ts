// src/game/managers/AudioManager.ts
import * as Phaser from 'phaser';

export type MusicTrack = 'bedroom' | 'kitchen' | 'playroom' | 'bathroom';
export type SoundEffect = 'feed' | 'play' | 'sleep' | 'bath' | 'achievement' | 'unlock';

export class AudioManager {
  private scene: Phaser.Scene;
  private currentMusic?: Phaser.Sound.BaseSound;
  private musicVolume: number = 0.3;
  private sfxVolume: number = 0.5;
  private musicEnabled: boolean = true;
  private sfxEnabled: boolean = true;

  // Mapping –º—É–∑—ã–∫–∏ –¥–ª—è –∫–æ–º–Ω–∞—Ç
  private readonly musicTracks: Record<MusicTrack, string> = {
    bedroom: 'lullaby_ambient',
    kitchen: 'kitchen_morning',
    playroom: 'playful_melody',
    bathroom: 'water_bubbles',
  };

  // Mapping –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  private readonly soundEffects: Record<SoundEffect, string> = {
    feed: 'nom_nom',
    play: 'giggle',
    sleep: 'yawn',
    bath: 'splash',
    achievement: 'achievement_unlock',
    unlock: 'room_unlock',
  };

  constructor(scene: Phaser.Scene) {
    this.scene = scene;
    this.loadSettings();
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∞—É–¥–∏–æ-—Ñ–∞–π–ª–æ–≤ (–≤—ã–∑—ã–≤–∞—Ç—å –≤ preload)
   */
  public static preloadAudio(scene: Phaser.Scene): void {
    // Ambient –º—É–∑—ã–∫–∞
    scene.load.audio('lullaby_ambient', '/mybaby/audio/ambient/lullaby_ambient.mp3');
    scene.load.audio('kitchen_morning', '/mybaby/audio/ambient/kitchen_morning.mp3');
    scene.load.audio('playful_melody', '/mybaby/audio/ambient/playful_melody.mp3');
    scene.load.audio('water_bubbles', '/mybaby/audio/ambient/water_bubbles.mp3');

    // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    scene.load.audio('nom_nom', '/mybaby/audio/effects/nom_nom.mp3');
    scene.load.audio('giggle', '/mybaby/audio/effects/giggle.mp3');
    scene.load.audio('yawn', '/mybaby/audio/effects/yawn.mp3');
    scene.load.audio('splash', '/mybaby/audio/effects/splash.mp3');
    scene.load.audio('achievement_unlock', '/mybaby/audio/effects/achievement.mp3');
    scene.load.audio('room_unlock', '/mybaby/audio/effects/unlock.mp3');
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏
   */
  public playMusic(track: MusicTrack, fadeIn: boolean = true): void {
    if (!this.musicEnabled) return;

    const trackKey = this.musicTracks[track];

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –º—É–∑—ã–∫—É
    if (this.currentMusic) {
      if (fadeIn) {
        this.fadeOutMusic(() => this.startMusic(trackKey, fadeIn));
      } else {
        this.currentMusic.stop();
        this.currentMusic.destroy();
        this.startMusic(trackKey, fadeIn);
      }
    } else {
      this.startMusic(trackKey, fadeIn);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –º—É–∑—ã–∫–∏
   */
  private startMusic(trackKey: string, fadeIn: boolean): void {
    if (!this.scene.sound.get(trackKey)) {
      this.currentMusic = this.scene.sound.add(trackKey, {
        loop: true,
        volume: fadeIn ? 0 : this.musicVolume,
      });
    } else {
      this.currentMusic = this.scene.sound.get(trackKey);
    }

    this.currentMusic.play();

    if (fadeIn) {
      this.scene.tweens.add({
        targets: this.currentMusic,
        volume: this.musicVolume,
        duration: 1500,
        ease: 'Linear',
      });
    }

    console.log(`üéµ –ò–≥—Ä–∞–µ—Ç: ${trackKey}`);
  }

  /**
   * –ü–ª–∞–≤–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –º—É–∑—ã–∫–∏
   */
  private fadeOutMusic(onComplete?: () => void): void {
    if (!this.currentMusic) return;

    this.scene.tweens.add({
      targets: this.currentMusic,
      volume: 0,
      duration: 1000,
      ease: 'Linear',
      onComplete: () => {
        if (this.currentMusic) {
          this.currentMusic.stop();
          this.currentMusic.destroy();
          this.currentMusic = undefined;
        }
        if (onComplete) onComplete();
      },
    });
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
   */
  public playSound(effect: SoundEffect, volume?: number): void {
    if (!this.sfxEnabled) return;

    const effectKey = this.soundEffects[effect];
    const finalVolume = volume ?? this.sfxVolume;

    const sound = this.scene.sound.add(effectKey, {
      volume: finalVolume,
    });

    sound.play();

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è
    sound.once('complete', () => {
      sound.destroy();
    });

    console.log(`üîä –ó–≤—É–∫: ${effectKey}`);
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–π –º—É–∑—ã–∫–∏
   */
  public stopMusic(fadeOut: boolean = true): void {
    if (fadeOut) {
      this.fadeOutMusic();
    } else {
      if (this.currentMusic) {
        this.currentMusic.stop();
        this.currentMusic.destroy();
        this.currentMusic = undefined;
      }
    }
  }

  /**
   * –ü–∞—É–∑–∞ –º—É–∑—ã–∫–∏
   */
  public pauseMusic(): void {
    if (this.currentMusic && this.currentMusic.isPlaying) {
      this.currentMusic.pause();
      console.log('‚è∏Ô∏è –ú—É–∑—ã–∫–∞ –Ω–∞ –ø–∞—É–∑–µ');
    }
  }

  /**
   * –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–∏
   */
  public resumeMusic(): void {
    if (this.currentMusic && this.currentMusic.isPaused) {
      this.currentMusic.resume();
      console.log('‚ñ∂Ô∏è –ú—É–∑—ã–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –º—É–∑—ã–∫–∏
   */
  public setMusicVolume(volume: number): void {
    this.musicVolume = Phaser.Math.Clamp(volume, 0, 1);
    if (this.currentMusic) {
      this.currentMusic.setVolume(this.musicVolume);
    }
    this.saveSettings();
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
   */
  public setSfxVolume(volume: number): void {
    this.sfxVolume = Phaser.Math.Clamp(volume, 0, 1);
    this.saveSettings();
  }

  /**
   * –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –º—É–∑—ã–∫–∏
   */
  public toggleMusic(enabled?: boolean): void {
    this.musicEnabled = enabled ?? !this.musicEnabled;
    
    if (!this.musicEnabled && this.currentMusic) {
      this.stopMusic(true);
    }
    
    this.saveSettings();
    console.log(`üéµ –ú—É–∑—ã–∫–∞: ${this.musicEnabled ? '–í–ö–õ' : '–í–´–ö–õ'}`);
  }

  /**
   * –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
   */
  public toggleSfx(enabled?: boolean): void {
    this.sfxEnabled = enabled ?? !this.sfxEnabled;
    this.saveSettings();
    console.log(`üîä –ó–≤—É–∫–∏: ${this.sfxEnabled ? '–í–ö–õ' : '–í–´–ö–õ'}`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  public getSettings() {
    return {
      musicVolume: this.musicVolume,
      sfxVolume: this.sfxVolume,
      musicEnabled: this.musicEnabled,
      sfxEnabled: this.sfxEnabled,
    };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ localStorage
   */
  private saveSettings(): void {
    const settings = {
      musicVolume: this.musicVolume,
      sfxVolume: this.sfxVolume,
      musicEnabled: this.musicEnabled,
      sfxEnabled: this.sfxEnabled,
    };
    localStorage.setItem('babyverse_audio_settings', JSON.stringify(settings));
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ localStorage
   */
  private loadSettings(): void {
    const saved = localStorage.getItem('babyverse_audio_settings');
    if (saved) {
      try {
        const settings = JSON.parse(saved);
        this.musicVolume = settings.musicVolume ?? 0.3;
        this.sfxVolume = settings.sfxVolume ?? 0.5;
        this.musicEnabled = settings.musicEnabled ?? true;
        this.sfxEnabled = settings.sfxEnabled ?? true;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      }
    }
  }

  /**
   * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
   */
  public destroy(): void {
    this.stopMusic(false);
  }
}