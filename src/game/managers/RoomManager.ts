// src/game/managers/RoomManager.ts
import * as Phaser from 'phaser';
import { GameState } from '../state/GameState';

export class RoomManager {
  private game: Phaser.Game;
  private gameState: GameState;
  private currentMusic?: Phaser.Sound.BaseSound;

  // –ú–∞–ø–ø–∏–Ω–≥ –º—É–∑—ã–∫–∏ –¥–ª—è –∫–æ–º–Ω–∞—Ç
  private musicMap: Record<string, string> = {
    BedroomScene: 'bedroom_music',
    KitchenScene: 'kitchen_music',
    PlayroomScene: 'playroom_music',
    BathroomScene: 'bathroom_music',
  };

  constructor(game: Phaser.Game) {
    this.game = game;
    this.gameState = GameState.getInstance();
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–º–Ω–∞—Ç–∞–º–∏ —Å –ø–ª–∞–≤–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
   */
  public async switchRoom(nextRoom: string): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–∞ –∂–µ –∫–æ–º–Ω–∞—Ç–∞
    if (this.gameState.currentRoom === nextRoom) {
      console.log('‚ö†Ô∏è –£–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–æ–º–Ω–∞—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞?
    if (!this.gameState.isRoomUnlocked(nextRoom)) {
      console.log('üîí –ö–æ–º–Ω–∞—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
      this.showLockedMessage();
      return;
    }

    console.log(`üö™ –ü–µ—Ä–µ—Ö–æ–¥: ${this.gameState.currentRoom} ‚Üí ${nextRoom}`);

    // 1Ô∏è‚É£ –ü–ª–∞–≤–Ω–æ–µ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ (–±–µ–ª—ã–π fade –¥–ª—è –º—è–≥–∫–æ—Å—Ç–∏)
    await this.fadeOut();

    // 2Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
    this.gameState.saveRoomState(this.gameState.currentRoom);

    // 3Ô∏è‚É£ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –º—É–∑—ã–∫—É
    this.stopCurrentMusic();

    // 4Ô∏è‚É£ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ü–µ–Ω—É
    const currentScene = this.game.scene.getScene(this.gameState.currentRoom);
    if (currentScene) {
      this.game.scene.stop(this.gameState.currentRoom);
    }
    this.game.scene.start(nextRoom);

    // 5Ô∏è‚É£ –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É
    this.gameState.currentRoom = nextRoom;

    // 6Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º—É–∑—ã–∫—É –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
    this.playRoomMusic(nextRoom);

    // 7Ô∏è‚É£ –ü–ª–∞–≤–Ω–æ–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ
    await this.fadeIn();
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
   */
  private showLockedMessage(): void {
    const currentScene = this.game.scene.getScenes(true)[0];
    if (currentScene) {
      const text = (currentScene as any).add.text(
        400, 300,
        'üîí –ö–æ–º–Ω–∞—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!\n–í—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏',
        {
          fontSize: '20px',
          color: '#ff6b6b',
          backgroundColor: '#ffffff',
          padding: { x: 20, y: 15 },
          align: 'center',
        }
      );
      text.setOrigin(0.5);
      text.setDepth(100);

      // –ò—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      currentScene.tweens.add({
        targets: text,
        alpha: 0,
        duration: 500,
        delay: 2000,
        onComplete: () => text.destroy(),
      });
    }
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏ –∫–æ–º–Ω–∞—Ç—ã
   */
  private playRoomMusic(roomKey: string): void {
    const musicKey = this.musicMap[roomKey];
    if (!musicKey) return;

    const scene = this.game.scene.getScene(roomKey);
    if (scene && scene.sound) {
      this.currentMusic = scene.sound.add(musicKey, {
        loop: true,
        volume: 0.3,
      });
      this.currentMusic.play();
      console.log(`üéµ –ò–≥—Ä–∞–µ—Ç –º—É–∑—ã–∫–∞: ${musicKey}`);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –º—É–∑—ã–∫–∏
   */
  private stopCurrentMusic(): void {
    if (this.currentMusic && this.currentMusic.isPlaying) {
      this.currentMusic.stop();
      this.currentMusic.destroy();
    }
  }

  /**
   * –≠—Ñ—Ñ–µ–∫—Ç –ø–ª–∞–≤–Ω–æ–≥–æ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è
   */
  private fadeOut(useWhite: boolean = false): Promise<void> {
    return new Promise((resolve) => {
      const scenes = this.game.scene.getScenes(true);
      if (scenes.length === 0) {
        resolve();
        return;
      }

      const currentScene = scenes[0];
      const color = useWhite ? [255, 255, 255] : [0, 0, 0];
      currentScene.cameras.main.fadeOut(500, ...color);
      
      currentScene.cameras.main.once('camerafadeoutcomplete', () => {
        resolve();
      });
    });
  }

  /**
   * –≠—Ñ—Ñ–µ–∫—Ç –ø–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è
   */
  private fadeIn(useWhite: boolean = false): Promise<void> {
    return new Promise((resolve) => {
      const scenes = this.game.scene.getScenes(true);
      if (scenes.length === 0) {
        resolve();
        return;
      }

      const currentScene = scenes[0];
      const color = useWhite ? [255, 255, 255] : [0, 0, 0];
      currentScene.cameras.main.fadeIn(500, ...color);
      
      currentScene.cameras.main.once('camerafadeincomplete', () => {
        resolve();
      });
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
   */
  public getCurrentRoom(): string {
    return this.gameState.currentRoom;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
   */
  public getAvailableRooms() {
    return this.gameState.getUnlockedRooms();
  }
}